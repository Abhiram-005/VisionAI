# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DuHHGYlCw5txt0ICTCFy8ZIo82N167sR
"""

# -*- coding: utf-8 -*-
import warnings
warnings.filterwarnings("ignore", category=SyntaxWarning)
warnings.filterwarnings("ignore", category=UserWarning)

import streamlit as st
import torch
import segmentation_models_pytorch as smp
from torchvision import transforms as T
from PIL import Image
import numpy as np
import io
from huggingface_hub import hf_hub_download
from streamlit_lottie import st_lottie
import requests

# ----------------- STREAMLIT CONFIG -----------------
st.set_page_config(
    page_title="CutOut Pro - Smart Background Remover",
    layout="wide",
    page_icon="âœ¨",
    initial_sidebar_state="collapsed"
)

# ----------------- CUSTOM THEME + CSS -----------------
st.markdown(
    """
    <style>
        /* General page style */
        body {background-color: #f9fbfd;}

        /* Buttons */
        .stButton>button {
            background: linear-gradient(90deg, #1E90FF, #00BFFF);
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            transition: all 0.3s ease-in-out;
        }
        .stButton>button:hover {
            transform: scale(1.05);
            background: linear-gradient(90deg, #00BFFF, #1E90FF);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        /* Center titles */
        h1, h2, h3, h4 {
            text-align: center;
            font-family: 'Segoe UI', sans-serif;
        }

        /* Image shadow */
        img {
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
    </style>
    """,
    unsafe_allow_html=True
)

# ----------------- LOTTIE LOADER -----------------
def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

ai_animation = load_lottieurl("https://assets2.lottiefiles.com/packages/lf20_m9lczp.json")

# ----------------- HERO SECTION -----------------
st.markdown(
    """
    <div style="text-align: center; padding: 30px;">
        <h1 style="color:#1E90FF; font-size: 42px; margin-bottom: 10px;">
            âœ¨ CutOut Pro â€” Smart Background Remover
        </h1>
        <p style="font-size:18px; color:#444; max-width:800px; margin:auto; line-height:1.6;">
            Transform your images effortlessly. <b>CutOut Pro</b> intelligently removes backgrounds,
            isolating your subject with professional accuracy.
            Upload your own image or try the demo below!
        </p>
    </div>
    """,
    unsafe_allow_html=True
)

st_lottie(ai_animation, height=200, key="ai")

st.markdown("---")

# ----------------- DEMO SECTION -----------------
st.markdown("## ðŸ”¹ Demo Preview")
st.markdown(
    """
    <div style="text-align: center; margin-bottom: 20px; font-size:16px; color:#555;">
        See how our AI instantly isolates subjects with pixel-perfect precision.
    </div>
    """,
    unsafe_allow_html=True
)

st.markdown(
    """
    <div style="display: flex; justify-content: center; gap: 80px; margin-bottom: 50px;">
        <div style="text-align: center;">
            <img src="https://raw.githubusercontent.com/Abhiram-005/VisionAI/main/demo_input.png"
                 alt="Original Demo"
                 style="width:220px;">
            <p style="margin-top:8px; font-size:14px; color:#444;">Original Image</p>
        </div>
        <div style="text-align: center;">
            <img src="https://raw.githubusercontent.com/Abhiram-005/VisionAI/main/demo_output.png"
                 alt="Isolated Subject"
                 style="width:220px;">
            <p style="margin-top:8px; font-size:14px; color:#444;">AI-Isolated Subject</p>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)

st.markdown("---")

# ----------------- MODEL LOADING -----------------
@st.cache_resource
def load_model_from_hf(repo_id, filename, device):
    model_path = hf_hub_download(repo_id=repo_id, filename=filename)
    model = smp.UnetPlusPlus(
        encoder_name="efficientnet-b5",
        encoder_weights=None,
        in_channels=3,
        classes=1
    )
    state = torch.load(model_path, map_location=device)
    model.load_state_dict(state)
    model.eval().to(device)
    return model

def image_to_tensor(pil_img, target_size=None):
    transforms = []
    if target_size:
        transforms.append(T.Resize(target_size))
    transforms.extend([
        T.ToTensor(),
        T.Normalize(mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225])
    ])
    return T.Compose(transforms)(pil_img).unsqueeze(0)

def pad_image(pil_img):
    w, h = pil_img.size
    new_w = (w + 31) // 32 * 32
    new_h = (h + 31) // 32 * 32
    result = Image.new("RGB", (new_w, new_h))
    result.paste(pil_img, (0, 0))
    return result, (w, h)

def predict_mask(model, pil_img, device, threshold=0.5):
    padded_img, orig_size = pad_image(pil_img)
    x = image_to_tensor(pil_img).to(device)
    with torch.no_grad():
        out = model(x)
    out = out.cpu()
    if out.shape[1] == 1:
        mask = (torch.sigmoid(out)[0, 0].numpy() > threshold).astype('uint8') * 255
    else:
        mask = (out.argmax(1)[0].numpy() != 0).astype('uint8') * 255
    mask = Image.fromarray(mask).convert("L").resize(orig_size, Image.NEAREST)
    return mask

def apply_mask_to_image(pil_img, mask_pil):
    img_np = np.array(pil_img.convert("RGB"))
    m = np.array(mask_pil) > 127
    out = np.zeros_like(img_np)
    out[m] = img_np[m]
    return Image.fromarray(out)

# ----------------- APP UI -----------------
DEVICE = torch.device("cpu")  # Streamlit Cloud = CPU only
HF_REPO = "Abhiram1705/VisionAI"   # ðŸ”¹ Replace with your HF repo
MODEL_FILENAME = "unetpp_effb5.pth"

model = load_model_from_hf(HF_REPO, MODEL_FILENAME, DEVICE)

# ----------------- UPLOAD SECTION -----------------
st.markdown("## ðŸ“¤ Try It Yourself")

uploaded_file = st.file_uploader("Upload an image (PNG, JPG, JPEG)", type=["png", "jpg", "jpeg"])

if uploaded_file:
    img = Image.open(uploaded_file).convert("RGB")
    MAX_SIZE = 512
    if max(img.size) > MAX_SIZE:
        img.thumbnail((MAX_SIZE, MAX_SIZE))

    col1, col2 = st.columns([1, 1])

    with col1:
        st.image(img, caption="Uploaded Image", use_container_width=True)
        run_button = st.button("ðŸš€ Run Background Removal", use_container_width=True)

    with col2:
        if run_button:
            with st.spinner("âš¡ AI is working... Please wait..."):
                mask = predict_mask(model, img, DEVICE, threshold=0.5)
                result = apply_mask_to_image(img, mask)

                # Fade-in effect
                st.markdown(
                    """
                    <div style="animation: fadeIn 1s;">
                        <style>@keyframes fadeIn {from {opacity:0;} to {opacity:1;}}</style>
                    </div>
                    """,
                    unsafe_allow_html=True
                )

                st.image(result, caption="Background Removed", use_container_width=True)

                buf = io.BytesIO()
                result.save(buf, format="PNG")
                buf.seek(0)
                st.download_button(
                    "â¬‡ Download Processed Image",
                    data=buf,
                    file_name="cutout_result.png",
                    mime="image/png",
                    use_container_width=True
                )
else:
    st.info("ðŸ‘† Upload an image to get started!")